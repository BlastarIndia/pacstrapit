#!/bin/bash




# -----------------------------------------------------------------------------
# variables: customize
# -----------------------------------------------------------------------------

# partition in which to install OS (caution)
_partition=/dev/sda

# machine's luks devmapper name (arbitrary)
_luks_name=luksroot

# machine's luks passphrase (strong)
_luks_pass=secret

# machine's hostname (arbitrary)
_hostname=luksiso

# machine's processor (intel or other)
_processor=intel

# machine's graphics card (intel, nvidia, or radeon)
_graphics=intel

# machine's hard drive (hdd or ssd)
_disk=hdd

# machine's locale # de_DE
                   # en_AU
                   # en_GB
                   # es_ES
                   # fr_FR
                   # it_IT
                   # ja_JP
                   # nl_NL
                   # zh_CN
                   # zh_TW
                   # etc...
_locale=en_US

# machine's keymap # de
                   # es
                   # fr
                   # it
                   # nl
                   # ru
                   # uk
                   # us
                   # etc...
_keymap=us

# machine's time zone # Africa/Johannesburg  (SAST)
                      # Africa/Lagos         (WAT)
                      # Africa/Lusaka        (CAT)
                      # Africa/Nairobi       (EAT)
                      # America/Denver       (MST)
                      # America/Indianapolis (CST)
                      # America/Los_Angeles  (PST)
                      # America/New_York     (EST)
                      # Asia/Calcutta        (IST)
                      # Asia/Hong_Kong       (HKT)
                      # Asia/Istanbul        (EET)
                      # Asia/Karachi         (PKT)
                      # Asia/Kathmandu       (NPT)
                      # Asia/Phnom_Penh      (ICT)
                      # Asia/Seoul           (KT)
                      # Asia/Shanghai        (CT)
                      # Asia/Tokyo           (JT)
                      # Australia/Perth      (WST)
                      # Australia/Sydney     (EST)
                      # Europe/Berlin        (CET)
                      # Europe/London        (GMT/BST)
                      # Pacific/Honolulu     (HST)
                      # etc...
_timezone=America/Los_Angeles

# root pass (strong)
_root_pass=secret

# user name (arbitrary)
_user_name=live

# user pass (strong)
_user_pass=secret

# debug on/off (0 or 1)
_debug=1




# -----------------------------------------------------------------------------
# dependency checks
# -----------------------------------------------------------------------------

# depends: root

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* depends: root *"
                       echo "*               *"
                       echo "*****************"
                                  fi

if ! [[ "$UID" == '0' ]]; then exit 1; fi

# depends: expect

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* depends: expect *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

if ! [[ -x /usr/bin/expect ]]; then pacman -Sy expect --noconfirm; fi

# depends: arch-install-scripts-bash

                   if [[ "$_debug" == '1' ]]; then
            echo "**************************************"
            echo "*                                    *"
            echo "* depends: arch-install-scripts-bash *"
            echo "*                                    *"
            echo "**************************************"
                                  fi

pacman -Sy --needed abs base-devel --noconfirm
abs extra/arch-install-scripts
cd /var/abs/extra/arch-install-scripts
sed -i '/^build.*/a sed -i "s!^SHELL=/bin/sh!SHELL=/bin/bash!" "$pkgname-$pkgver"/arch-chroot.in' PKGBUILD
makepkg -Acsi --asroot --noconfirm




# -----------------------------------------------------------------------------
# functions: toc
# -----------------------------------------------------------------------------

# gdiskify
# luksify
# zramswapify
# pacstrapify




# -----------------------------------------------------------------------------
# gdiskify: create three GPT partitions (no swap) for btrfs + zramswap
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                        echo "**************"
                        echo "*  --------  *"
                        echo "* |gdiskify| *"
                        echo "*  --------  *"
                        echo "**************"
                                  fi


function gdiskify() {

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* spawning gdisk *"
                      echo "*                *"
                      echo "******************"
                                  fi

expect <<EOF
  spawn gdisk ${_partition}
  expect "Command*" {
    send "o\r"
  }
  expect "Proceed*" {
    send "Y\r"
  }
  expect "Command*" {
    send "n\r"
  }
  expect "Partition number*" {
    send "1\r"
  }
  expect "First sector*" {
    send "\r"
  }
  expect "Last sector*" {
    send "+2M\r"
  }
  expect "Hex code or GUID*" {
    send "EF02\r"
  }
  expect "Command*" {
    send "n\r"
  }
  expect "Partition number*" {
    send "2\r"
  }
  expect "First sector*" {
    send "\r"
  }
  expect "Last sector*" {
    send "+128M\r"
  }
  expect "Hex code or GUID*" {
    send "8300\r"
  }
  expect "Command*" {
    send "n\r"
  }
  expect "Partition number*" {
    send "3\r"
  }
  expect "First sector*" {
    send "\r"
  }
  expect "Last sector*" {
    send "\r"
  }
  expect "Hex code or GUID*" {
    send "8300\r"
  }
  expect "Command*" {
    send "w\r"
  }
  expect "Do you want to proceed*" {
    send "Y\r"
  }
  expect eof
EOF
}




# -----------------------------------------------------------------------------
# luksify: create btrfs on luks system (boot, root)
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*  -------  *"
                         echo "* |luksify| *"
                         echo "*  -------  *"
                         echo "*************"
                                  fi


function luksify() {

# create unencrypted btrfs filesystem for /boot

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* mkfs.btrfs boot *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

mkfs.btrfs ${_partition}2

# load kernel modules required for luks

                   if [[ "$_debug" == '1' ]]; then
                      echo "*******************"
                      echo "*                 *"
                      echo "* dm_mod dm-crypt *"
                      echo "*                 *"
                      echo "*******************"
                                  fi

modprobe dm_mod dm-crypt

# create luks root partition

                   if [[ "$_debug" == '1' ]]; then
              echo "**********************************"
              echo "*                                *"
              echo "* spawning cryptsetup luksFormat *"
              echo "*                                *"
              echo "**********************************"
                                  fi

expect <<EOF
  spawn cryptsetup --cipher aes-xts-plain64 \
                   --key-size 512           \
                   --hash sha512            \
                   --iter-time 5000         \
                   --use-random             \
                   --verify-passphrase      \
                   luksFormat ${_partition}3
  expect "Are you sure*" {
    send "YES\r"
  }
  expect "Enter*" {
    send "${_luks_pass}\r"
  }
  expect "Verify*" {
    send "${_luks_pass}\r"
  }
  expect eof
EOF

# open luks root partition

                   if [[ "$_debug" == '1' ]]; then
               echo "********************************"
               echo "*                              *"
               echo "* spawning cryptsetup luksOpen *"
               echo "*                              *"
               echo "********************************"
                                  fi

expect <<EOF
  spawn cryptsetup luksOpen ${_partition}3 ${_luks_name}
  expect "Enter*" {
    send "${_luks_pass}\r"
  }
  expect eof
EOF

# create btrfs filesystem

                   if [[ "$_debug" == '1' ]]; then
               echo "*********************************"
               echo "*                               *"
               echo "* mkfs.btrfs devmapper luksroot *"
               echo "*                               *"
               echo "*********************************"
                                  fi

mkfs.btrfs /dev/mapper/${_luks_name}

# create and mount main btrfs subvolumes

                   if [[ "$_debug" == '1' ]]; then
           echo "****************************************"
           echo "*                                      *"
           echo "* mounting devmapper luksroot in /mnt2 *"
           echo "*                                      *"
           echo "****************************************"
                                  fi

mkdir -p /mnt2
mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache /dev/mapper/${_luks_name} /mnt2

                   if [[ "$_debug" == '1' ]]; then
            echo "**************************************"
            echo "*                                    *"
            echo "* creating btrfs subvolumes in /mnt2 *"
            echo "*                                    *"
            echo "**************************************"
                                  fi

cd /mnt2
btrfs subvolume create @
btrfs subvolume create @home
btrfs subvolume create @opt
btrfs subvolume create @srv
btrfs subvolume create @tmp
btrfs subvolume create @usr
btrfs subvolume create @var

                   if [[ "$_debug" == '1' ]]; then
             echo "*************************************"
             echo "*                                   *"
             echo "* mounting btrfs subvolumes in /mnt *"
             echo "*                                   *"
             echo "*************************************"
                                  fi

mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache,subvol=@ /dev/mapper/${_luks_name} /mnt
for _btrfs_dir in home opt srv tmp usr var; do
  mkdir -p /mnt/${_btrfs_dir} && mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache,subvol=@${_btrfs_dir} /dev/mapper/${_luks_name} /mnt/${_btrfs_dir}
done

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* unmounting /mnt2 *"
                     echo "*                  *"
                     echo "********************"
                                  fi

cd && umount /mnt2 && rmdir /mnt2 --ignore-fail-on-non-empty

# create and mount boot btrfs subvolume

                   if [[ "$_debug" == '1' ]]; then
           echo "****************************************"
           echo "*                                      *"
           echo "* mounting devmapper luksroot in /mnt3 *"
           echo "*                                      *"
           echo "****************************************"
                                  fi

mkdir -p /mnt3
mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache,nodev,nosuid,noexec ${_partition}2 /mnt3

                   if [[ "$_debug" == '1' ]]; then
          echo "******************************************"
          echo "*                                        *"
          echo "* creating btrfs boot subvolume in /mnt3 *"
          echo "*                                        *"
          echo "******************************************"
                                  fi

cd /mnt3
btrfs subvolume create @boot

                   if [[ "$_debug" == '1' ]]; then
        echo "**********************************************"
        echo "*                                            *"
        echo "* mounting btrfs boot subvolume in /mnt/boot *"
        echo "*                                            *"
        echo "**********************************************"
                                  fi

cd && umount /mnt3 && rmdir /mnt3 --ignore-fail-on-non-empty
mkdir -p /mnt/boot && mount -t btrfs -o rw,noatime,nodiratime,compress=lzo,space_cache,nodev,nosuid,noexec,subvol=@boot ${_partition}2 /mnt/boot
}




# -----------------------------------------------------------------------------
# zramswapify: start zram swap service
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*  -----------  *"
                       echo "* |zramswapify| *"
                       echo "*  -----------  *"
                       echo "*****************"
                                  fi


function zramswapify() {

# always suspend to RAM

                   if [[ "$_debug" == '1' ]]; then
                    echo "**********************"
                    echo "*                    *"
                    echo "* systemd sleep.conf *"
                    echo "*                    *"
                    echo "**********************"
                                  fi

cat >> /etc/systemd/sleep.conf <<'EOF'
[Sleep]
SuspendMode=mem
HibernateMode=mem
HybridSleepMode=mem
SuspendState=mem
HibernateState=mem
HybridSleepState=mem
EOF

# fetch deps to build aur packages

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* aur package deps *"
                     echo "*                  *"
                     echo "********************"
                                  fi

# build zramswap aur package

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* install zramswap *"
                     echo "*                  *"
                     echo "********************"
                                  fi

for _pkg in zramswap; do
  mkdir -p ~/.src && cd ~/.src
  rm -rf $_pkg ${_pkg}.tar.gz && mkdir -p $_pkg
  curl -k -O https://aur.archlinux.org/packages/${_pkg:0:2}/$_pkg/$_pkg.tar.gz
  tar -xvzf ${_pkg}.tar.gz --strip 1 -C $_pkg
  cd $_pkg
  makepkg -Acsi --asroot --noconfirm
  cd ..
done

# start zramswap

                   if [[ "$_debug" == '1' ]]; then
                      echo "******************"
                      echo "*                *"
                      echo "* start zramswap *"
                      echo "*                *"
                      echo "******************"
                                  fi

systemctl start zramswap
systemctl enable zramswap
}




# -----------------------------------------------------------------------------
# pacstrapify: initialize and configure system
# -----------------------------------------------------------------------------


                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*  -----------  *"
                       echo "* |pacstrapify| *"
                       echo "*  -----------  *"
                       echo "*****************"
                                  fi


function pacstrapify() {

# pacstrap packages

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* pacstrap *"
                         echo "*          *"
                         echo "************"
                                  fi

pacstrap /mnt abs            \
              base           \
              base-devel     \
              btrfs-progs    \
              dhclient       \
              dialog         \
              dnscrypt-proxy \
              ethtool        \
              expect         \
              grub-bios      \
              iproute2       \
              iw             \
              kexec-tools    \
              mercurial      \
              net-tools      \
              openresolv     \
              openssh        \
              python2        \
              sshpass        \
              wget           \
              wireless_tools \
              wpa_actiond    \
              wpa_supplicant

# install a bootloader

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* genfstab *"
                         echo "*          *"
                         echo "************"
                                  fi

genfstab -U -p /mnt >> /mnt/etc/fstab

# set hostname

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* hostname *"
                         echo "*          *"
                         echo "************"
                                  fi

arch-chroot /mnt echo ${_hostname} > /etc/hostname

# set nameservers

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* DNSCrypt *"
                         echo "*          *"
                         echo "************"
                                  fi

arch-chroot /mnt cat >> /etc/resolv.conf.head <<'EOF'
# DNSCrypt
options edns0
nameserver 127.0.0.1

# OpenDNS nameservers
nameserver 208.67.222.222
nameserver 208.67.220.220

# Google nameservers
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF
arch-chroot /mnt systemctl enable dnscrypt-proxy.service

# set locale

                   if [[ "$_debug" == '1' ]]; then
                          echo "**********"
                          echo "*        *"
                          echo "* locale *"
                          echo "*        *"
                          echo "**********"
                                  fi

arch-chroot /mnt sed -i "s!#${_locale}\.UTF-8 UTF-8!${_locale}\.UTF-8 UTF-8!" /etc/locale.gen
arch-chroot /mnt locale-gen
arch-chroot /mnt cat >> /etc/locale.conf <<EOF
LANG=${_locale}.UTF-8
LC_TIME=${_locale}.UTF-8
EOF

# set console font

                   if [[ "$_debug" == '1' ]]; then
                          echo "**********"
                          echo "*        *"
                          echo "* keymap *"
                          echo "*        *"
                          echo "**********"
                                  fi

arch-chroot /mnt cat >> /etc/vconsole.conf <<EOF
KEYMAP=${_keymap}
FONT=Lat2-Terminus16
FONT_MAP=
EOF

# set timezone

                   if [[ "$_debug" == '1' ]]; then
                         echo "************"
                         echo "*          *"
                         echo "* timezone *"
                         echo "*          *"
                         echo "************"
                                  fi

arch-chroot /mnt ln -s /usr/share/zoneinfo/${_timezone} /etc/localtime

# set hardware clock

                   if [[ "$_debug" == '1' ]]; then
                          echo "***********"
                          echo "*         *"
                          echo "* hwclock *"
                          echo "*         *"
                          echo "***********"
                                  fi

arch-chroot /mnt hwclock --systohc --utc

# set zramswap

                   if [[ "$_debug" == '1' ]]; then
                    echo "**********************"
                    echo "*                    *"
                    echo "* systemd sleep.conf *"
                    echo "*                    *"
                    echo "**********************"
                                  fi

arch-chroot /mnt cat >> /etc/systemd/sleep.conf <<'EOF'
[Sleep]
SuspendMode=mem
HibernateMode=mem
HybridSleepMode=mem
SuspendState=mem
HibernateState=mem
HybridSleepState=mem
EOF

# build zramswap aur package

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* install zramswap *"
                     echo "*                  *"
                     echo "********************"
                                  fi

arch-chroot /mnt cat >> /dev/shm/installzram.sh <<'EOF'
#!/bin/bash
cd /dev/shm
curl -k -O https://aur.archlinux.org/packages/zr/zramswap/zramswap.tar.gz
tar -xvzf zramswap.tar.gz --strip 1
makepkg -Acsi --asroot --noconfirm
EOF
arch-chroot /mnt chmod +x /dev/shm/installzram.sh
arch-chroot /mnt /dev/shm/installzram.sh
arch-chroot /mnt systemctl enable zramswap

# set initramfs

                   if [[ "$_debug" == '1' ]]; then
                         echo "*************"
                         echo "*           *"
                         echo "* initramfs *"
                         echo "*           *"
                         echo "*************"
                                  fi

if   [[ "${_processor}" == 'intel' && "${_graphics}" == 'intel' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c-intel i915"!' /etc/mkinitcpio.conf
elif [[ "${_processor}" == 'intel' && "${_graphics}" == 'nvidia' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c-intel nouveau"!' /etc/mkinitcpio.conf
elif [[ "${_processor}" == 'intel' && "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c-intel radeon"!' /etc/mkinitcpio.conf
elif [[ "${_graphics}" == 'intel' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c i915"!' /etc/mkinitcpio.conf
elif [[ "${_graphics}" == 'nvidia' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c nouveau"!' /etc/mkinitcpio.conf
elif [[ "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i 's!^MODULES.*!MODULES="crc32c radeon"!' /etc/mkinitcpio.conf
fi
arch-chroot /mnt sed -i 's!^HOOKS.*!HOOKS="base udev autodetect modconf block keyboard keymap encrypt btrfs filesystems shutdown usr"!' /etc/mkinitcpio.conf
arch-chroot /mnt mkinitcpio -p linux

# set sysctl.conf

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* sysctl.conf *"
                        echo "*             *"
                        echo "***************"
                                  fi

if [[ "${_disk}" == 'ssd' ]]; then
arch-chroot /mnt cat >> /etc/sysctl.conf <<'EOF'
vm.swappiness=1
vm.vfs_cache_pressure=50
EOF
fi

# install grub

                   if [[ "$_debug" == '1' ]]; then
                           echo "********"
                           echo "*      *"
                           echo "* grub *"
                           echo "*      *"
                           echo "********"
                                  fi

_luks_uuid=$(lsblk -f | grep ${_partition##/dev/}3 | awk '{print $3}')
if   [[ "${_disk}" == 'ssd' && "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ elevator=noop radeon.dpm=1\"!" /etc/default/grub
elif [[ "${_disk}" == 'ssd' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ elevator=noop\"!" /etc/default/grub
elif [[ "${_graphics}" == 'radeon' ]]; then
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@ radeon.dpm=1\"!" /etc/default/grub
else
  arch-chroot /mnt sed -i "s!^GRUB_CMDLINE_LINUX.*!GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${_luks_uuid}:${_luks_name} rootflags=subvol=@\"!" /etc/default/grub
fi
arch-chroot /mnt grub-install --target=i386-pc --recheck ${_partition}
arch-chroot /mnt cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

# set root password

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* root passwd *"
                        echo "*             *"
                        echo "***************"
                                  fi

arch-chroot /mnt expect <<EOF
  spawn passwd root
  expect "Enter*" {
    send "${_root_pass}\r"
  }
  expect "Retype*" {
    send "${_root_pass}\r"
  }
  expect eof
EOF

# create user

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* create user *"
                        echo "*             *"
                        echo "***************"
                                  fi

arch-chroot /mnt useradd -m -g users -G audio,games,log,lp,network,optical,power,scanner,storage,video,wheel -s /bin/bash ${_user_name}

# set user password

                   if [[ "$_debug" == '1' ]]; then
                        echo "***************"
                        echo "*             *"
                        echo "* user passwd *"
                        echo "*             *"
                        echo "***************"
                                  fi

arch-chroot /mnt expect <<EOF
  spawn passwd ${_user_name}
  expect "Enter*" {
    send "${_user_pass}\r"
  }
  expect "Retype*" {
    send "${_user_pass}\r"
  }
  expect eof
EOF

# set systemd services

                   if [[ "$_debug" == '1' ]]; then
                     echo "********************"
                     echo "*                  *"
                     echo "* systemd services *"
                     echo "*                  *"
                     echo "********************"
                                  fi

arch-chroot /mnt systemctl enable cronie
arch-chroot /mnt systemctl enable zramswap

# set modprobe.conf

                   if [[ "$_debug" == '1' ]]; then
                       echo "*****************"
                       echo "*               *"
                       echo "* modprobe.conf *"
                       echo "*               *"
                       echo "*****************"
                                  fi

arch-chroot /mnt cat >> /etc/modprobe.d/modprobe.conf <<'EOF'
alias floppy off
blacklist fd0
blacklist floppy
blacklist bcma
blacklist snd_pcsp
blacklist pcspkr
EOF

# debug

                   if [[ "$_debug" == '1' ]]; then
                           echo "*********"
                           echo "*       *"
                           echo "* debug *"
                           echo "*       *"
                           echo "*********"
                                  fi

if [[ "$_debug" == '1' ]]; then
  echo "cat /boot/grub/grub.cfg:"
  arch-chroot /mnt cat /boot/grub/grub.cfg
  echo "cat /etc/fstab:"
  arch-chroot /mnt cat /etc/fstab
  echo "cat /etc/hostname:"
  arch-chroot /mnt cat /etc/hostname
  echo "cat /etc/locale.conf:"
  arch-chroot /mnt cat /etc/locale.conf
  echo "cat /etc/locale.gen:"
  arch-chroot /mnt cat /etc/locale.gen
  echo "cat /etc/mkinitcpio.conf:"
  arch-chroot /mnt cat /etc/mkinitcpio.conf
  echo "cat /etc/modprobe.d/modprobe.conf:"
  arch-chroot /mnt cat /etc/modprobe.d/modprobe.conf
  echo "cat /etc/resolv.conf.head:"
  arch-chroot /mnt cat /etc/resolv.conf.head
  echo "cat /etc/sysctl.conf:"
  arch-chroot /mnt cat /etc/sysctl.conf
  echo "cat /etc/systemd/sleep.conf:"
  arch-chroot /mnt cat /etc/systemd/sleep.conf
  echo "cat /etc/vconsole.conf:"
  arch-chroot /mnt cat /etc/vconsole.conf
  echo "ls -laiF /home/${_user_name}:"
  arch-chroot /mnt ls -laiF /home/${_user_name}
  echo "systemctl list-unit-files:"
  arch-chroot /mnt systemctl list-unit-files | perl -p -e 'print while (<>)'
fi

# exit pacstrapped chroot

                   if [[ "$_debug" == '1' ]]; then
                          echo "**********"
                          echo "*        *"
                          echo "* umount *"
                          echo "*        *"
                          echo "**********"
                                  fi

umount /mnt/{boot,home,opt,srv,tmp,usr,var,}
}




# -----------------------------------------------------------------------------
# go
# -----------------------------------------------------------------------------

gdiskify
luksify
zramswapify
pacstrapify

echo "******************************"
echo "*                            *"
echo "* Maybe time for a reboot... *"
echo "*                            *"
echo "******************************"
